<UserControl x:Class="VSIXProject1.ToolWindow1Control"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:vsui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
             xmlns:images="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
             xmlns:z="clr-namespace:VSIXProject1"
        
             Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
             Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="300"
             Name="MyToolWindow">
    <!-- 
    static vs dynamic resources
    https://stackoverflow.com/questions/200839/whats-the-difference-between-staticresource-and-dynamicresource-in-wpf
    -->
    <UserControl.Resources>
        <Style x:Key="TreeViewItemStyle" TargetType="TreeViewItem">
            <Setter Property="Margin" Value="1 2 1 2" />
            <!--
            <EventSetter Event="MouseDoubleClick" Handler="Solutions_MouseDoubleClick" />
            -->
        </Style>
        <Style x:Key="ContextMenuStyle2" TargetType="{x:Type StackPanel}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding SolutionType}" Value="{x:Static z:SolutionType.Solution}">
                    <Setter Property="ContextMenu" Value="{DynamicResource SolutionContextMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding SolutionType}" Value="{x:Static z:SolutionType.Folder}">
                    <Setter Property="ContextMenu" Value="{DynamicResource FolderContextMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding SolutionType}" Value="{x:Static z:SolutionType.Recents}">
                    <Setter Property="ContextMenu" Value="{DynamicResource RecentsContextMenu}" />
                </DataTrigger>
                <DataTrigger Binding="{Binding SolutionType}" Value="{x:Static z:SolutionType.Recent}">
                    <Setter Property="ContextMenu" Value="{DynamicResource RecentContextMenu}" />
                </DataTrigger>
            </Style.Triggers>
        </Style>


        <Style x:Key="ContextMenuStyle1" TargetType="{x:Type ContextMenu}">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ContextMenu}">
                        <Border BorderThickness="1" CornerRadius="4" BorderBrush="Black" x:Name="Border" Padding="1" Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}">
                            <StackPanel ClipToBounds="True" Orientation="Vertical" IsItemsHost="True" Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
                        </Border>
                        <!--
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                        -->
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="MenuItemStyle" TargetType="{x:Type MenuItem}">
            <Setter Property="Background" Value="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}" />
            <Setter Property="Margin" Value="0 2 0 2" />
        </Style>
        <!--
        <Style x:Key="ContextMenuStyle" TargetType="{x:Type StackPanel}">
            <Setter Property="ContextMenu" Value="{DynamicResource TempContextMenu}" />
        </Style>
        -->
        <ContextMenu x:Key="SolutionContextMenu"
            Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
            Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                     Style="{DynamicResource ContextMenuStyle1}"
>

            <MenuItem Header="Open" Click="Menu_Test_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Open}" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Properties" Click="Menu_Test_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Property}" />
                </MenuItem.Icon>
            </MenuItem>
            <Separator />
            <MenuItem Header="Remove" Click="Menu_RemoveSolution_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Cancel}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="FolderContextMenu"
            Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
            Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                     Style="{DynamicResource ContextMenuStyle1}"
>
            <MenuItem Header="Rename" Click="Menu_Test_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon >
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Rename}" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Add Folder" Click="Menu_AddFolder_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.AddFolder}" />
                </MenuItem.Icon>
            </MenuItem>
            <MenuItem Header="Add Solution" Click="Menu_AddSolution_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.AddScreen}" />
                </MenuItem.Icon>
            </MenuItem>
            <Separator />
            <MenuItem Header="Remove" Click="Menu_RemoveFolder_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Cancel}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="RecentsContextMenu"
            Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
            Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                     Style="{DynamicResource ContextMenuStyle1}"
>
            <MenuItem Header="Refresh" Click="Menu_Test_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Refresh}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <ContextMenu x:Key="RecentContextMenu"
            Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
            Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                     Style="{DynamicResource ContextMenuStyle1}"
>
            <MenuItem Header="Open" Click="Menu_Test_Click" Style="{DynamicResource MenuItemStyle}">
                <MenuItem.Icon>
                    <imaging:CrispImage Moniker="{x:Static images:KnownMonikers.Open}" />
                </MenuItem.Icon>
            </MenuItem>
        </ContextMenu>
        <!--
        <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:vs_shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">
            <Style TargetType="Label">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            </Style>
            <Style TargetType="TreeView">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
        </ResourceDictionary>
        -->
    </UserControl.Resources>
    <Grid>
        <!-- <StackPanel Orientation="Vertical"> -->
        <DockPanel HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
            <!--
            <TextBlock Margin="10" HorizontalAlignment="Center" DockPanel.Dock="Top" Name="title">ToolWindow1</TextBlock>
            <Button Content="Click me!" Click="button1_Click" Width="120" Height="80" Name="button1"  DockPanel.Dock="Top"/>
            MouseDoubleClick="Solutions_MouseDoubleClick_1"
            -->
            <TreeView Height="Auto" Name="solutions" VerticalAlignment="Stretch" DockPanel.Dock="Top" 
                      TreeViewItem.Expanded="solutions_Expanded" TreeViewItem.Collapsed="solutions_Collapsed"
             Background="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowBackgroundBrushKey}}"
             Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}" 
                      BorderThickness="0"
                      ItemContainerStyle="{StaticResource TreeViewItemStyle}"
                      
                      PreviewMouseLeftButtonDown="Solutions_PreviewMouseLeftButtonDown"
                       >
                <TreeView.Resources>
                    <!-- Style the inactive selection the same as active -->
                    <!-- https://stackoverflow.com/questions/21606281/change-wpf-treeviewitem-background-color-when-selected-but-lost-focus -->
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}"
                     Color="{DynamicResource {x:Static SystemColors.HighlightColorKey}}" />
                    <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}"
                     Color="{DynamicResource {x:Static SystemColors.HighlightTextColorKey}}"/>
                    <!--
                    <ContextMenu x:Key="SolutionContext" StaysOpen="true">
                        <MenuItem Header="Open" Click="Menu_Open_Click" >
                        </MenuItem>
                    </ContextMenu>
                    <ContextMenu x:Key="FolderContext" StaysOpen="true">
                        <MenuItem Header="Bah" Click="Menu_Bah_Click" />
                    </ContextMenu>
                    <ContextMenu x:Key="RecentContext" StaysOpen="true">
                        <MenuItem Header="Open" Click="Menu_Open_Click" />
                    </ContextMenu>
                    -->
                </TreeView.Resources>
                <TreeView.ItemTemplate >
                    <HierarchicalDataTemplate DataType="{x:Type MenuItem}" ItemsSource="{Binding Items}" >
                        <!-- Style="{StaticResource ContextMenuStyle}" works, no {Binding ContextMenuStyle} -->
                        <StackPanel Orientation="Horizontal" Style="{StaticResource ContextMenuStyle2}">
                            <imaging:CrispImage Moniker="{Binding Icon}" Visibility="Visible" Height="16" Width="16" Margin="0 0 4 0"/>
                            <TextBlock Text="{Binding Title}" FontWeight="{Binding Weight}"
                                       Foreground="{DynamicResource {x:Static vsui:EnvironmentColors.ToolWindowTextBrushKey}}"
                                       />
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
        </DockPanel>
    </Grid>
</UserControl>
